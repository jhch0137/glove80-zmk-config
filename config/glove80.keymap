/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

&lt {
    tapping-term-ms = <150>;
    quick-tap-ms = <200>;
    flavor = "balanced";
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LOWER>, <&to LOWER>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        td_txtsel_l: td_txtsel_l {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TXTSEL_L";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LEFT))>, <&txtsel_l>;

            tapping-term-ms = <80>;
        };

        td_txtsel_r: td_txtsel_r {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TXTSEL_R";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(RIGHT))>, <&txtsel_r>;

            tapping-term-ms = <80>;
        };

        td_scaps: td_scaps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SCAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        linesel: linesel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "LINESEL";
        };

        linedel: linedel {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp DELETE>;
            label = "LINEDEL";
        };

        linecopy: linecopy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp LC(C)>;
            label = "LINECOPY";
        };

        hwpnarrow: hwpnarrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(N)) &kp LS(LA(J))>;
            label = "HWPNARROW";
        };

        hwpwiden: hwpwiden {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(K)) &kp LS(LA(W))>;
            label = "HWPWIDEN";
        };

        txtsel_l: txtsel_l {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LS(LC(LEFT))>;
            label = "TXTSEL_L";
        };

        txtsel_r: txtsel_r {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LS(LC(RIGHT))>;
            label = "TXTSEL_R";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp ESCAPE       &hm F1 F2    &kp F3          &kp F4       &kp F5                                                                                                                                             &kp F6                      &kp F7           &kp F8                   &hm F11 F9                &hm F12 F10
&hm TILDE GRAVE  &hm EXCL N1  &hm AT_SIGN N2  &hm HASH N3  &hm DOLLAR N4  &hm PERCENT N5                                                                                                        &hm CARET N6  &hm AMPERSAND N7            &hm ASTERISK N8  &hm LEFT_PARENTHESIS N9  &hm RIGHT_PARENTHESIS N0  &hm UNDERSCORE MINUS
&kp TAB          &kp Q        &hm LC(W) W     &kp E        &kp R          &kp T                                                                                                                 &kp Y         &kp U                       &kp I            &kp O                    &kp P                     &hm PLUS EQUAL
&kp LSHIFT       &kp A        &kp S           &kp D        &kp F          &kp G                                                                                                                 &kp H         &kp J                       &kp K            &kp L                    &hm COLON SEMICOLON       &hm DOUBLE_QUOTES SQT
&kp LSHIFT       &hm LC(Z) Z  &hm LC(X) X     &hm LC(C) C  &hm LC(V) V    &hm LG(V) B     &kp HOME         &kp END      &hm LA(LC(LS(N1))) LC(ENTER)  &kp LEFT  &kp UP_ARROW  &mo 4             &kp N         &kp M                       &kp COMMA        &kp DOT                  &hm QUESTION FSLH         &hm LG(TAB) K_APP
&kp LGUI         &kp PG_UP    &kp PG_DN       &kp LCTRL    &kp LALT                       &lt 4 BACKSPACE  &lt 4 SPACE  &hm INS DELETE                &kp DOWN  &kp RIGHT     &hm LSHIFT SPACE                &hm LC(LA(PIPE)) RIGHT_ALT  &hm LALT RCTRL   &kp ENTER                &hm BSLH LEFT_BRACKET     &hm BSLH RBKT
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                              &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                        &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                         &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                       &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to DEFAULT  &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans       &trans  &trans  &trans             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to FACTORY_TEST
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        mylayer {
            bindings = <
&kp INS            &trans            &trans             &trans             &trans                                                                                                                                         &trans     &trans        &trans     &trans  &trans
&trans             &trans            &trans             &trans             &trans             &trans                                                                                                              &trans  &trans     &trans        &trans     &trans  &kp LA(LS(R))
&kp LC(LA(TAB))    &kp LC(LS(LEFT))  &kp LC(LS(RIGHT))  &kp LC(LG(LEFT))   &kp LC(LG(RIGHT))  &kp LG(LS(T))                                                                                                       &trans  &trans     &kp UP_ARROW  &trans     &trans  &kp LA(LS(E))
&hm SLCK CAPSLOCK  &linesel          &kp LS(LG(S))      &linedel           &linecopy          &trans                                                                                                              &trans  &kp LEFT   &kp DOWN      &kp RIGHT  &trans  &trans
&trans             &trans            &trans             &kp LC(LG(LS(T)))  &kp LC(LS(LG(V)))  &kp LA(LC(LG(V)))  &hm LA(LEFT) LC(PG_UP)  &hm LA(RIGHT) LC(PG_DN)  &trans  &trans        &trans         &trans     &trans  &trans     &hwpnarrow    &hwpwiden  &trans  &trans
&magic 2 0         &kp LC(SEMI)      &kp LA(SEMI)       &trans             &trans                                &trans                  &trans                   &trans  &kp LC(LEFT)  &kp LC(RIGHT)  &kp ENTER          &kp LCTRL  &trans        &trans     &trans  &trans
            >;
        };
    };
};
